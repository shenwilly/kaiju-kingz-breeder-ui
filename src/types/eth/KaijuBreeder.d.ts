/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface KaijuBreederInterface extends ethers.utils.Interface {
  functions: {
    "FUSION_PRICE()": FunctionFragment;
    "breed(uint256,uint256)": FunctionFragment;
    "breedFree(uint256,uint256)": FunctionFragment;
    "breederId()": FunctionFragment;
    "claimRWaste()": FunctionFragment;
    "depositBreeder(uint256)": FunctionFragment;
    "fee()": FunctionFragment;
    "genesisCount()": FunctionFragment;
    "getNextBabyId()": FunctionFragment;
    "getRWaste()": FunctionFragment;
    "hasBreeder()": FunctionFragment;
    "kaiju()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rwaste()": FunctionFragment;
    "syncRWaste()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFee(uint256)": FunctionFragment;
    "updateWhitelist(address[],bool[])": FunctionFragment;
    "whitelist(address)": FunctionFragment;
    "withdrawBreeder()": FunctionFragment;
    "withdrawETH(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FUSION_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "breed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "breedFree",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "breederId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimRWaste",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositBreeder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "genesisCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextBabyId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRWaste", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasBreeder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kaiju", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rwaste", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "syncRWaste",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhitelist",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawBreeder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "FUSION_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "breed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "breedFree", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "breederId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRWaste",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositBreeder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "genesisCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextBabyId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRWaste", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasBreeder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kaiju", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rwaste", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "syncRWaste", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBreeder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;

  events: {
    "Breed(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Breed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type BreedEvent = TypedEvent<[BigNumber] & { babyId: BigNumber }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class KaijuBreeder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KaijuBreederInterface;

  functions: {
    FUSION_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    breed(
      _kaijuId: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    breedFree(
      _kaijuId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    breederId(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimRWaste(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositBreeder(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    genesisCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNextBabyId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRWaste(overrides?: CallOverrides): Promise<[string]>;

    hasBreeder(overrides?: CallOverrides): Promise<[boolean]>;

    kaiju(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rwaste(overrides?: CallOverrides): Promise<[string]>;

    syncRWaste(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateWhitelist(
      addresses: string[],
      values: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    withdrawBreeder(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawETH(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  FUSION_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  breed(
    _kaijuId: BigNumberish,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  breedFree(
    _kaijuId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  breederId(overrides?: CallOverrides): Promise<BigNumber>;

  claimRWaste(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositBreeder(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  genesisCount(overrides?: CallOverrides): Promise<BigNumber>;

  getNextBabyId(overrides?: CallOverrides): Promise<BigNumber>;

  getRWaste(overrides?: CallOverrides): Promise<string>;

  hasBreeder(overrides?: CallOverrides): Promise<boolean>;

  kaiju(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rwaste(overrides?: CallOverrides): Promise<string>;

  syncRWaste(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateWhitelist(
    addresses: string[],
    values: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  withdrawBreeder(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawETH(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FUSION_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    breed(
      _kaijuId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    breedFree(
      _kaijuId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    breederId(overrides?: CallOverrides): Promise<BigNumber>;

    claimRWaste(overrides?: CallOverrides): Promise<void>;

    depositBreeder(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    genesisCount(overrides?: CallOverrides): Promise<BigNumber>;

    getNextBabyId(overrides?: CallOverrides): Promise<BigNumber>;

    getRWaste(overrides?: CallOverrides): Promise<string>;

    hasBreeder(overrides?: CallOverrides): Promise<boolean>;

    kaiju(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rwaste(overrides?: CallOverrides): Promise<string>;

    syncRWaste(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateWhitelist(
      addresses: string[],
      values: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    withdrawBreeder(overrides?: CallOverrides): Promise<void>;

    withdrawETH(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Breed(uint256)"(
      babyId?: null
    ): TypedEventFilter<[BigNumber], { babyId: BigNumber }>;

    Breed(babyId?: null): TypedEventFilter<[BigNumber], { babyId: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    FUSION_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    breed(
      _kaijuId: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    breedFree(
      _kaijuId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    breederId(overrides?: CallOverrides): Promise<BigNumber>;

    claimRWaste(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositBreeder(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    genesisCount(overrides?: CallOverrides): Promise<BigNumber>;

    getNextBabyId(overrides?: CallOverrides): Promise<BigNumber>;

    getRWaste(overrides?: CallOverrides): Promise<BigNumber>;

    hasBreeder(overrides?: CallOverrides): Promise<BigNumber>;

    kaiju(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rwaste(overrides?: CallOverrides): Promise<BigNumber>;

    syncRWaste(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateWhitelist(
      addresses: string[],
      values: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawBreeder(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawETH(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FUSION_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    breed(
      _kaijuId: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    breedFree(
      _kaijuId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    breederId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimRWaste(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositBreeder(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    genesisCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextBabyId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRWaste(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasBreeder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kaiju(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rwaste(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    syncRWaste(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateWhitelist(
      addresses: string[],
      values: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawBreeder(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
